function genRunDemosAll
%Like genRunDemos but finds all methods whose names begin with 'demo'.

error('Deprecated - use makeRunDemos() instead');

filename = 'runDemosAll';    %The name of the generated m-file.

flist = dir;
files = {flist.name};

%Rename existing runDemosAll.m
if(ismember([filename,'.m'],files))
   fprintf(['\nrenaming ',filename,'.m as ',filename,'.old ...\n']);
   if(ismember([filename,'.old'],files))
       eval(['!del ',filename,'.old']);
   end
   eval(['!rename ',filename,'.m ',filename,'.old']);
end

%Open file
fid = fopen([filename,'.m'],'w');
fprintf(fid,'%%Code automatically generated by genRunDemos.\n%%Run all BLT demos.\n');


%Get all of the classes
info = dirinfo('.');
classes = vertcat(info.classes);    


%Search through every class for methods beginning with 'demo'
for i=1:numel(classes)
    try
        meta = eval(['?',classes{i}]);
        methods = meta.Methods;
        for m =1: numel(methods)
           method = methods{m};
           if(strncmpi(method.Name,'demo',4));
              fprintf(fid,[method.Name,'(',classes{i},');\n']); %Write method call to file
           end
        end
    catch ME
        warning('CLASSTREE:discoveryWarning',['Could not discover information about class ',classes{i}]);
        continue;
    end
end
fprintf(fid,'\n');
fclose(fid);

    
function info = dirinfo(directory)
%Recursively generate an array of structures holding information about each
%directory/subdirectory beginning with, (and including) the initially specified
%parent directory. 
        info = what(directory);
        flist = dir(directory);
        dlist =  {flist([flist.isdir]).name};
        for i=1:numel(dlist)
            dirname = dlist{i};
            if(~strcmp(dirname,'.') && ~strcmp(dirname,'..'))
               info = [info, dirinfo([directory,'\',dirname])]; 
            end
        end
end



end